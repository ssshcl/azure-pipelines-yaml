# Python Django
# Build and deploy Python Django project as Linux Web App on Azure.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '{{ azureRmConnection.Id }}'
  
  # Web app name
  webAppName: '{{ webAppName }}'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: '{{ webAppName }}'

  # Version of python to be used
  pythonVersion: 3.7

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        architecture: 'x64'
    
    - task: PythonScript@0
      displayName: 'Export project path'
      inputs:
        scriptSource: 'inline'
        script: |
          """Search all subdirectories for `manage.py`."""
          from glob import iglob
          from os import path
          # Python >= 3.5
          manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
          if not manage_py:
              raise SystemExit('Could not find a Django project')
          project_location = path.dirname(path.abspath(manage_py))
          print('Found Django project in', project_location)
          print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
    
    - script: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
      displayName: 'Install prerequisites'
      workingDirectory: $(projectRoot)

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    
    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Install Python Extension'
            inputs:
              azureSubscription: $(azureSubscription)
              Action: 'Install Extensions'
              WebAppName: $(webAppName)
              ExtensionsList: python353x86
              OutputVariable: 'PYTHON_EXT'

          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy'
            inputs:
              azureSubscription: $(azureSubscription)
              WebAppName: $(webAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              ScriptType: 'Inline Script'
              InlineScript: |
                @echo off
                if NOT exist requirements.txt (
                  echo No Requirements.txt found.
                  EXIT /b 0
                )
                if NOT exist "$(PYTHON_EXT)/python.exe" (
                  echo Python extension not available >&2
                  EXIT /b 1
                )
                echo Installing dependencies
                call "$(PYTHON_EXT)/python.exe" -m pip install --upgrade pip
                call "$(PYTHON_EXT)/python.exe" -m pip install -U setuptools
                if %errorlevel% NEQ 0 (
                  echo Failed to install setuptools >&2
                  EXIT /b 1
                )
                call "$(PYTHON_EXT)/python.exe" -m pip install -r requirements.txt
                if %errorlevel% NEQ 0 (
                  echo Failed to install dependencies>&2
                  EXIT /b 1
                )
              enableCustomDeployment: true
              ExcludeFilesFromAppDataFlag: false
              DeploymentType: zipDeploy